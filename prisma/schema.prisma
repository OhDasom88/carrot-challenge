// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "sqlite"
  provider = "postgresql"
  // url      = env("DATABASE_URL")
  // url      = env("POSTGRES_URL")
  // url      = env("POSTGRES_PRISMA_URL")
  url      = env("POSTGRES_URL_NEW")
  // directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id    Int @id @default(autoincrement())
  username String
  avatar String?
  password String
  email String? @unique
  bio String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  products Product[]
  comments Comment[]
  tweets    Tweet[]
  likes     Like[]
}

model Tweet {
  id          Int     @id @default(autoincrement())
  title       String  @default("Untitled")
  description String?
  views       Int     @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  comments Comment[]
  likes    Like[]
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet   Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  userId Int
  tweetId Int
  @@id(name: "id", [userId, tweetId])
}

model Comment {
  id      Int    @id @default(autoincrement())
  payload String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet   Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  userId Int
  tweetId Int
}
model Product {
  id          Int    @id @default(autoincrement())
  title       String
  price       Float
  photo       String
  description String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}